package org.usfirst.frc.team5414.robot.commands;

import java.util.ArrayList;
import java.util.StringTokenizer;

import org.usfirst.frc.team5414.robot.Robot;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.command.CommandGroup;
//import jaci.pathfinder.Pathfinder;

/**
 * Goes from left side of starting area to the front of the right scale
 */
public class AutonomousLeftToRightScale extends CommandGroup {

    public AutonomousLeftToRightScale() {
    	
    	StringTokenizer st = null;
    	ArrayList<Double> left = new ArrayList<>();
    	ArrayList<Double> right = new ArrayList<>();
    	String path = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 2 0 2 0 3 0 3 0 4 0 5 0 7 1 8 2 10 3 11 4 13 5 15 5 17 6 19 7 22 7 24 8 26 8 29 8 32 9 34 9 37 9 39 9 42 9 45 9 48 9 51 10 53 10 56 10 59 12 62 14 65 17 68 20 71 22 74 25 77 28 80 30 84 33 87 36 90 39 93 41 96 44 99 47 102 50 105 52 108 55 111 58 114 61 117 63 120 66 123 68 126 71 129 74 132 76 135 79 138 82 141 84 144 87 147 89 150 92 153 95 156 97 159 100 162 103 165 105 168 108 170 111 173 113 176 115 179 118 182 121 185 123 187 126 190 128 193 131 196 134 199 136 202 139 204 141 208 144 211 147 214 150 217 153 220 156 223 159 227 162 230 165 234 168 237 171 241 175 245 178 248 181 252 185 256 188 260 191 263 195 267 198 271 202 275 206 279 209 283 213 287 216 291 220 295 223 300 227 304 231 308 235 312 238 316 241 320 245 324 249 328 253 332 256 336 260 341 264 345 268 349 272 353 276 358 280 362 284 366 288 370 292 375 296 379 300 383 304 388 308 392 312 396 316 400 319 405 323 409 327 413 331 417 335 421 338 425 342 429 346 433 349 437 353 441 357 445 360 449 364 452 368 456 371 460 375 464 379 468 382 471 384 475 388 479 392 483 395 486 399 490 402 494 406 498 409 501 413 505 416 509 420 512 423 516 427 520 430 523 434 527 437 530 441 534 444 538 447 541 451 545 454 549 458 552 461 556 464 559 468 563 471 566 474 570 478 573 481 577 484 580 488 584 491 587 494 591 498 595 501 598 504 602 508 605 511 609 514 613 518 616 521 620 524 623 528 627 531 630 534 634 538 637 541 641 544 644 548 648 551 651 554 655 558 658 561 662 565 665 568 669 571 672 575 676 578 679 581 683 585 686 588 690 591 693 594 696 598 700 601 703 604 707 608 710 611 713 614 717 618 720 621 724 625 727 628 730 631 733 635 737 638 740 642 743 645 746 649 750 653 753 656 756 659 759 663 762 667 766 670 769 674 772 678 775 681 778 685 782 688 785 692 788 696 791 700 794 703 797 707 800 711 803 715 806 718 809 722 812 725 814 729 817 733 820 737 823 741 826 745 829 748 832 752 835 756 837 760 840 764 843 768 846 772 849 776 852 779 855 783 858 787 861 791 864 795 867 798 870 802 873 806 875 810 879 814 882 818 885 821 888 825 891 829 894 832 897 836 900 840 903 844 906 847 909 851 912 854 916 858 919 862 922 866 925 869 928 873 931 876 935 880 938 884 941 887 944 891 948 895 951 898 955 902 958 905 962 909 965 912 969 916 972 920 976 923 979 927 983 930 986 934 990 937 993 941 997 945 1000 948 1004 952 1007 955 1010 958 1014 962 1017 966 1021 969 1024 973 1027 976 1031 980 1034 983 1037 987 1041 991 1044 994 1047 998 1051 1001 1054 1005 1057 1009 1060 1013 1063 1016 1066 1020 1069 1024 1072 1027 1075 1031 1078 1035 1081 1039 1084 1043 1087 1047 1090 1051 1093 1055 1096 1058 1099 1062 1102 1066 1104 1070 1107 1074 1110 1078 1113 1082 1116 1085 1119 1089 1122 1093 1125 1097 1128 1101 1131 1104 1134 1108 1136 1112 1139 1115 1142 1119 1146 1123 1148 1126 1151 1130 1154 1134 1157 1137 1161 1141 1164 1145 1167 1148 1170 1152 1173 1156 1176 1159 1179 1163 1182 1166 1185 1170 1188 1174 1191 1177 1194 1181 1197 1185 1200 1188 1203 1192 1206 1196 1209 1199 1212 1203 1215 1207 1218 1210 1221 1214 1224 1218 1227 1221 1230 1225 1233 1228 1236 1232 1239 1236 1242 1239 1245 1243 1248 1247 1250 1250 1253 1254 1256 1258 1259 1261 1262 1265 1265 1268 1268 1272 1271 1276 1274 1279 1277 1283 1280 1287 1282 1291 1285 1294 1288 1298 1291 1302 1294 1306 1297 1310 1299 1314 1302 1317 1305 1321 1308 1325 1310 1329 1313 1333 1316 1337 1318 1341 1321 1345 1324 1349 1326 1352 1329 1356 1332 1360 1334 1364 1337 1368 1339 1372 1342 1376 1345 1379 1347 1383 1350 1387 1352 1390 1355 1394 1358 1398 1360 1402 1363 1406 1365 1410 1368 1413 1370 1417 1373 1421 1375 1425 1378 1429 1380 1433 1383 1436 1385 1440 1388 1444 1391 1448 1393 1452 1396 1456 1398 1460 1401 1463 1403 1467 1406 1471 1408 1475 1411 1478 1413 1482 1416 1486 1418 1490 1421 1494 1424 1499 1426 1502 1429 1506 1431 1509 1434 1513 1437 1517 1439 1520 1442 1524 1444 1528 1447 1532 1449 1536 1452 1540 1455 1544 1457 1548 1460 1552 1462 1556 1465 1560 1467 1564 1470 1568 1473 1572 1475 1576 1478 1580 1480 1584 1483 1588 1486 1592 1488 1596 1491 1600 1493 1604 1496 1608 1499 1611 1501 1615 1504 1619 1506 1623 1509 1627 1512 1631 1514 1635 1517 1638 1519 1642 1522 1646 1525 1650 1527 1654 1530 1657 1532 1661 1535 1665 1538 1669 1540 1673 1543 1677 1545 1681 1548 1685 1550 1688 1553 1692 1555 1696 1557 1700 1560 1704 1562 1708 1565 1712 1567 1717 1569 1721 1572 1725 1574 1729 1576 1733 1579 1737 1581 1741 1583 1745 1585 1749 1588 1753 1590 1758 1592 1762 1594 1766 1596 1770 1599 1774 1601 1778 1604 1782 1606 1786 1608 1790 1611 1794 1613 1798 1616 1802 1618 1806 1621 1810 1624 1814 1626 1818 1629 1822 1632 1826 1634 1830 1637 1834 1639 1838 1642 1842 1645 1846 1647 1849 1650 1853 1653 1857 1657 1862 1660 1866 1664 1869 1667 1872 1670 1875 1673 1878 1676 1880 1680 1883 1683 1885 1686 1887 1689 1890 1691 1892 1694 1894 1697 1896 1700 1898 1703 1899 1706 1900 1708 1902 1710 1903 1713 1905 1716 1905 1719 1906 1721 1907 1723 1907 1726 1908 1728 1908 1731 1908 1733 1909 1735 1909 1737 1909 1740 1909 1742 1909 1744 1910 1746 1910 1748 1911 1750 1912 1752 1912 1754 1912 1756 1913 1758 1913 1760 1913 1762 1913 1763 1914 1765 1915 1766 1916 1768 1916 1769 1916 1770 1916 1772 1917 1773 1917 1775 1917 1776 1917 1777 1917 1778 1917 1779 1917 1781 1918 1782 1920 1783 1923 1784 1925 1785 1927 1786 1929 1787 1931 1787 1933 1788 1934 1789 1936 1789 1939 1790 1942 1792 1944 1793 1946 1794 1949 1796 1950 1797 1951 1798 1953 1799 1954 1800 1956 1802 1957 1804 1958 1805 1959 1807 1961 1809 1962 1811 1962 1812 1963 1814 1964 1816 1964 1818 1965 1820 1965 1822 1966 1824 1966 1825 1966 1827 1967 1829 1967 1831 1967 1833 1968 1835 1968 1836 1969 1838 1969 1840 1970 1842 1971 1844 1971 1845 1972 1847 1974 1849 1975 1851 1976 1852 1978 1854 1980 1855 1981 1857 1983 1858 1985 1860 1987 1861 1990 1863 1992 1864 1994 1865 1997 1867 1999 1868 2002 1870 2005 1871 2008 1872 2010 1873 2013 1874 2016 1876 2019 1877 2022 1878 2026 1880 2029 1881 2031 1882 2034 1883 2037 1884 2040 1885 2043 1886 2046 1887 2050 1888 2053 1889 2057 1890 2060 1891 2064 1893 2068 1894 2071 1895 2075 1896 2078 1898 2082 1899 2085 1901 2089 1902 2092 1904 2096 1906 2099 1907 2102 1909 2106 1911 2109 1913 2112 1915 2115 1916 2118 1918 2121 1920 2125 1923 2128 1925 2131 1927 2134 1929 2137 1931 2140 1934 2143 1936 2146 1938 2149 1940 2151 1943 2153 1945 2156 1947 2159 1950 2162 1952 2165 1955 2168 1957 2171 1960 2174 1962 2176 1965 2179 1967 2182 1970 2185 1973 2187 1975 2190 1978 2193 1980 2196 1983 2198 1986 2201 1988 2204 1991 2206 1994 2209 1996 2212 1999 2215 2002 2218 2005 2220 2007 2223 2010 2226 2013 2228 2016 2231 2018 2234 2021 2236 2024 2239 2026 2241 2029 2244 2032 2246 2035 2249 2037 2252 2040 2255 2043 2257 2046 2260 2048 2263 2051 2265 2054 2267 2057 2269 2060 2271 2063 2274 2066 2277 2068 2280 2071 2282 2073 2285 2076 2287 2078 2290 2081 2292 2084 2295 2086 2297 2089 2299 2092 2302 2095 2304 2098 2307 2100 2310 2102 2312 2105 2314 2107 2317 2110 2319 2113 2322 2115 2325 2118 2327 2121 2330 2123 2332 2126 2335 2128 2338 2131 2341 2134 2343 2136 2346 2138 2349 2140 2352 2141 2354 2142 2357 2144 2359 2145 2362 2147 2365 2148 2367 2150 2370 2152 2373 2154 2376 2156 2378 2158 2381 2160 2384 2162 2386 2165 2389 2168 2391 2170 2394 2173 2396 2176 2399 2178 2401 2181 2403 2184 2406 2187 2409 2190 2412 2193 2415 2196 2419 2199 2423 2202 2425 2205 2428 2209 2432 2212 2435 2215 2438 2219 2442 2222 2445 2227 2448 2230 2452 2234 2456 2238 2460 2242 2464 2247 2468 2252 2473 2257 2478 2261 2482 2266 2487 2271 2491 2276 2495 2282 2500 2287 2504 2292 2508 2298 2513 2303 2517 2309 2521 2315 2526 2322 2531 2328 2536 2335 2540 2342 2546 2348 2551 2355 2556 2361 2561 2368 2566 2375 2571 2382 2575 2388 2580 2395 2584 2401 2589 2408 2593 2415 2598 2422 2603 2429 2608 2436 2612 2443 2617 2449 2621 2456 2625 2463 2630 2470 2634 2476 2638 2483 2643 2489 2647 2494 2651 2500 2656 2507 2661 2512 2665 2518 2670 2523 2674 2529 2679 2534 2684 2540 2689 2546 2694 2551 2699 2557 2704 2562 2708 2568 2713 2573 2718 2579 2723 2584 2728 2590 2733 2596 2737 2601 2742 2607 2747 2612 2752 2618 2757 2623 2761 2629 2764 2635 2768 2641 2771 2648 2775 2655 2780 2661 2784 2668 2789 2674 2793 2679 2797 2684 2801 2690 2805 2696 2809 2702 2812 2708 2816 2714 2820 2720 2824 2727 2828 2733 2831 2738 2835 2744 2839 2750 2843 2755 2847 2761 2851 2767 2855 2772 2859 2778 2863 2783 2867 2789 2872 2795 2876 2800 2881 2805 2885 2811 2889 2816 2894 2822 2898 2827 2903 2833 2907 2838 2911 2844 2916 2849 2921 2855 2925 2860 2930 2866 2935 2871 2940 2876 2944 2881 2949 2887 2954 2892 2959 2898 2964 2903 2969 2908 2974 2914 2979 2919 2984 2924 2989 2930 2995 2935 3000 2941 3005 2946 3010 2951 3015 2957 3020 2962 3025 2968 3030 2973 3035 2978 3040 2984 3045 2989 3050 2994 3055 2999 3060 3002 3064 3007 3068 3011 3072 3015 3076 3018 3080 3022 3084 3025 3088 3028 3091 3031 3094 3033 3097 3036 3100 3038 3103 3040 3105";
    	int skip = 1;
    	int count = 0;
    	
    	int startingKickSkip = 75;
    	st = new StringTokenizer(path);
    	
//    	try {	
    		for(int i = 0; i < startingKickSkip; i++) st.nextToken();
    		while(st.hasMoreTokens())
        	{
    			if(count++ == skip)
    			{
    				double l = Double.parseDouble(st.nextToken());
    				double r = Double.parseDouble(st.nextToken());
//    				if(l%1 != 0 && r%1 != 0)
//    				{
    					left.add(l);
    					right.add(r);
    					count = 0;
//    				}
    			}
    			else
    			{
    				try {
    				st.nextToken();
    				st.nextToken();
    				} catch(Exception e) {}
    			}
        	}
//    	} catch(Exception e) {
//    		e.printStackTrace();
//    		Robot.drivetrain.stop();
//    		DriverStation.reportWarning("NOOOO", true);
//    	}
		
    	addSequential(new DriveEncDist(left, right));
    }
}
