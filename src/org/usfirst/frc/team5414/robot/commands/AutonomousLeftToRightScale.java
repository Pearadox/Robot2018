package org.usfirst.frc.team5414.robot.commands;

import java.util.ArrayList;
import java.util.StringTokenizer;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.command.CommandGroup;
//import jaci.pathfinder.Pathfinder;

/**
 * Goes from left side of starting area to the front of the right scale
 */
public class AutonomousLeftToRightScale extends CommandGroup {

    public AutonomousLeftToRightScale() {
    	
    	StringTokenizer st = null;
//    	ArrayList<MotorPair> list = new ArrayList<>();
    	ArrayList<Integer> left = new ArrayList<>();
    	ArrayList<Integer> right = new ArrayList<>();
    	String path = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 3 0 4 0 4 0 5 0 5 0 5 0 6 1 7 2 8 3 10 4 13 6 17 8 21 11 26 15 32 19 38 24 46 30 54 36 64 43 75 51 88 60 102 70 117 81 134 93 152 106 171 119 191 134 211 148 233 163 257 179 280 196 305 214 331 231 357 250 383 268 412 287 440 306 469 325 498 344 528 365 559 386 590 406 621 427 653 449 686 472 718 494 750 516 784 539 819 561 854 583 888 606 922 629 956 652 990 674 1025 699 1060 723 1094 747 1129 770 1164 793 1201 816 1236 839 1271 862 1306 885 1340 906 1374 930 1408 953 1442 975 1477 997 1510 1020 1545 1042 1579 1063 1613 1084 1646 1105 1679 1126 1712 1147 1744 1168 1775 1189 1807 1210 1838 1230 1870 1250 1902 1270 1933 1290 1963 1309 1993 1327 2023 1346 2052 1364 2081 1383 2110 1400 2139 1419 2168 1437 2196 1455 2224 1473 2254 1491 2283 1510 2312 1528 2341 1545 2368 1561 2395 1578 2423 1595 2450 1613 2477 1630 2503 1646 2530 1663 2558 1680 2585 1697 2612 1714 2640 1731 2667 1748 2693 1765 2720 1782 2745 1798 2771 1814 2797 1830 2822 1846 2847 1862 2873 1878 2898 1893 2924 1908 2951 1924 2977 1940 3003 1956 3029 1972 3055 1988 3080 2004 3105 2019 3131 2035 3156 2050 3181 2065 3206 2080 3230 2096 3256 2112 3281 2127 3306 2143 3333 2157 3360 2173 3385 2189 3410 2205 3435 2221 3460 2236 3485 2252 3510 2268 3535 2283 3560 2298 3584 2313 3609 2328 3634 2342 3658 2357 3683 2370 3708 2383 3732 2396 3754 2408 3776 2421 3798 2433 3819 2445 3840 2457 3860 2468 3879 2478 3898 2489 3917 2499 3935 2509 3954 2519 3972 2529 3989 2538 4006 2547 4023 2556 4040 2564 4057 2572 4073 2579 4090 2586 4105 2594 4120 2601 4135 2609 4150 2615 4165 2622 4179 2628 4192 2634 4206 2640 4220 2646 4233 2651 4246 2656 4260 2660 4272 2665 4286 2669 4298 2673 4311 2677 4323 2680 4335 2683 4347 2686 4359 2688 4372 2691 4384 2693 4396 2694 4407 2696 4418 2697 4430 2698 4441 2699 4452 2700 4462 2700 4473 2701 4484 2701 4494 2701 4505 2701 4514 2701 4525 2701 4535 2701 4545 2701 4556 2701 4567 2701 4577 2701 4588 2701 4598 2701 4609 2701 4619 2701 4629 2701 4639 2701 4649 2701 4658 2701 4668 2702 4678 2702 4688 2702 4698 2703 4709 2707 4720 2709 4731 2710 4743 2712 4755 2714 4767 2716 4780 2718 4793 2720 4806 2722 4820 2725 4835 2727 4851 2731 4868 2735 4887 2739 4906 2743 4927 2749 4949 2755 4972 2761 4998 2768 5024 2776 5051 2784 5079 2793 5108 2802 5139 2811 5170 2821 5201 2831 5234 2841 5268 2852 5303 2863 5339 2874 5374 2885 5410 2896 5448 2908 5487 2920 5526 2933 5566 2946 5605 2960 5646 2973 5687 2988 5730 3001 5772 3016 5815 3030 5859 3044 5902 3059 5947 3073 5992 3088 6038 3102 6084 3117 6130 3132 6176 3148 6224 3163 6273 3178 6321 3194 6369 3210 6417 3226 6465 3242 6513 3259 6563 3274 6614 3291 6664 3306 6714 3322 6763 3338 6814 3353 6865 3369 6916 3385 6969 3401 7021 3416 7072 3432 7124 3449 7175 3466 7226 3483 7278 3500 7331 3518 7385 3536 7437 3554 7488 3573 7541 3593 7593 3613 7647 3634 7702 3655 7755 3677 7809 3699 7861 3723 7914 3746 7967 3770 8022 3795 8079 3819 8132 3844 8185 3870 8239 3895 8293 3921 8348 3947 8404 3974 8460 4001 8514 4027 8569 4053 8624 4078 8678 4104 8733 4128 8790 4151 8845 4174 8900 4199 8954 4223 9008 4246 9062 4269 9119 4291 9175 4313 9230 4335 9285 4356 9339 4378 9394 4399 9449 4421 9507 4442 9562 4463 9616 4484 9671 4505 9726 4524 9781 4544 9838 4562 9894 4581 9949 4599 10004 4618 10059 4636 10114 4653 10169 4671 10227 4689 10283 4707 10337 4725 10392 4743 10446 4760 10501 4777 10558 4794 10615 4811 10670 4827 10725 4844 10781 4861 10835 4877 10891 4893 10947 4909 11003 4926 11058 4942 11113 4959 11167 4975 11221 4992 11277 5008 11333 5024 11388 5039 11443 5054 11498 5069 11553 5084 11608 5100 11665 5115 11720 5131 11774 5146 11828 5163 11882 5179 11937 5197 11993 5215 12049 5233 12103 5251 12158 5270 12213 5290 12268 5309 12324 5329 12381 5350 12437 5370 12492 5391 12547 5413 12601 5435 12656 5458 12714 5481 12771 5504 12826 5527 12881 5551 12936 5574 12991 5598 13049 5621 13107 5645 13163 5668 13219 5691 13274 5715 13328 5738 13384 5761 13440 5783 13496 5803 13550 5823 13604 5842 13658 5862 13712 5882 13767 5902 13823 5922 13877 5942 13930 5961 13984 5979 14037 5998 14090 6019 14143 6037 14197 6055 14249 6072 14299 6089 14346 6105 14388 6118 14432 6130 14474 6143 14511 6155 14546 6166 14580 6175 14609 6182 14637 6189 14663 6195 14688 6200 14710 6205 14731 6209 14748 6212 14765 6215 14780 6217 14793 6218 14806 6219 14816 6219 14826 6219 14834 6219 14841 6218 14848 6218 14852 6218 14856 6218 14858 6218 14860 6218 14862 6218 14862 6218 14862 6218 14862 6218 14861 6218 14860";
    	try {	
    		st = new StringTokenizer(path);
    		while(st.hasMoreTokens())
        	{
    			left.add(Integer.parseInt(st.nextToken()));
    			right.add(Integer.parseInt(st.nextToken()));
//        		double l = Double.parseDouble(st.nextToken());
//        		double r = Double.parseDouble(st.nextToken());
//        		list.add(new MotorPair(l, r));
        	}
    	} catch(Exception e) {DriverStation.reportWarning("NOOOO", true);}
		
    	addSequential(new DriveEncDist(left, right));
//		addSequential(new DriveEncDist(list));
    }
}
