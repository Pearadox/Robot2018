package org.usfirst.frc.team5414.robot.commands;

import java.util.ArrayList;
import java.util.StringTokenizer;

import org.usfirst.frc.team5414.robot.Robot;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.command.CommandGroup;

/**
 *
 */
public class AutoSwitchLtoL extends CommandGroup {

    public AutoSwitchLtoL() {
    	StringTokenizer st = null;
    	ArrayList<Double> left = new ArrayList<>();
    	ArrayList<Double> right = new ArrayList<>();
    	String path = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 2 3 2 3 3 3 3 3 3 3 3 4 3 4 4 4 4 5 4 5 5 6 5 6 6 7 6 7 7 8 8 9 9 10 10 11 11 12 11 13 13 14 14 15 15 16 16 17 17 19 18 20 20 22 21 23 23 25 24 26 26 28 27 30 29 31 30 33 32 35 34 37 36 39 38 40 39 42 41 44 43 46 45 48 47 50 49 52 51 54 53 56 55 58 57 60 59 62 61 64 63 66 65 68 67 70 68 72 70 74 72 76 74 77 76 79 78 81 80 83 82 85 83 87 85 89 87 90 89 92 90 94 92 96 94 98 96 100 98 101 99 103 101 105 103 107 104 109 106 111 108 112 109 114 111 116 113 118 114 119 116 121 117 123 119 124 121 126 122 128 124 129 126 131 127 133 129 134 130 136 132 138 134 139 135 141 137 143 138 144 140 146 142 147 143 149 145 151 146 152 148 154 149 155 151 157 152 159 154 160 155 162 157 163 159 165 160 167 162 168 163 170 165 171 166 173 168 174 169 176 171 178 172 179 174 181 175 182 176 184 178 185 179 187 181 189 183 190 184 192 186 193 187 195 189 196 190 198 192 199 193 201 194 202 196 204 197 205 199 207 200 208 202 210 203 211 205 213 206 214 208 216 209 217 211 219 212 220 214 222 215 224 217 225 218 226 219 228 221 229 222 231 224 232 225 234 227 235 228 237 230 238 231 240 232 241 234 243 235 244 237 246 238 247 239 249 241 250 242 252 244 253 245 255 247 256 248 258 250 259 251 261 253 262 254 264 255 265 257 266 258 268 260 269 261 271 263 272 264 274 265 275 267 277 268 278 270 280 271 281 273 282 274 284 275 285 277 287 278 288 280 290 281 291 283 293 284 294 285 296 287 297 288 298 290 300 291 301 293 303 294 304 295 306 297 307 298 309 300 310 301 311 303 313 304 314 305 316 307 317 308 319 310 320 311 322 313 323 315 325 316 327 318 329 320 331 322 333 323 334 325 336 327 338 329 340 331 342 333 345 335 347 337 349 339 351 341 354 343 356 345 358 348 361 350 363 352 366 354 368 357 370 359 373 361 375 364 378 366 380 369 383 371 385 373 388 376 391 378 393 381 396 383 398 386 401 388 404 391 406 393 409 396 411 399 414 401 417 404 419 406 422 409 425 412 427 414 430 417 433 420 435 423 438 425 441 428 443 431 446 434 448 436 451 439 454 442 456 445 459 447 461 450 464 453 467 456 470 459 472 462 475 465 477 468 480 470 483 473 485 476 488 479 491 482 494 485 496 488 499 491 502 494 505 496 507 499 510 502 513 505 516 508 519 511 522 514 525 517 527 520 530 523 533 525 536 528 539 531 542 534 545 537 548 540 550 543 553 546 556 549 559 551 561 554 564 557 567 560 570 563 573 566 576 569 579 571 582 574 585 577 588 580 591 583 594 586 597 588 600 591 603 594 606 597 609 600 612 603 614 606 617 609 620 611 623 614 626 617 629 620 632 623 634 626 637 628 640 632 643 634 646 637 649 640 651 643 654 646 657 649 660 652 663 655 666 658 669 661 671 664 674 667 677 670 680 673 683 676 686 679 688 682 691 685 694 688 697 691 699 694 702 697 705 700 708 703 710 706 713 709 716 712 719 715 722 719 724 722 727 725 730 728 732 731 735 734 738 737 740 741 743 744 746 747 748 750 751 753 753 757 756 760 758 764 761 767 763 771 766 774 768 778 770 781 773 785 775 789 777 792 779 796 781 800 784 804 786 808 788 812 789 816 791 820 793 824 795 828 797 832 799 836 801 840 803 845 805 849 807 853 809 857 811 861 813 865 815 869 817 873 819 877 821 881 823 885 825 889 828 893 830 897 832 901 834 905 837 908 839 912 842 916 844 920 846 923 849 927 851 931 854 935 856 938 859 942 861 946 864 949 866 953 869 957 871 961 873 965 876 968 878 972 881 976 883 980 885 984 887 988 890 992 892 997 894 1000 896 1005 898 1009 900 1013 902 1017 904 1021 906 1026 908 1030 909 1035 911 1040 913 1044 914 1049 915 1054 917 1059 918 1064 919 1069 921 1074 922 1079 923 1084 924 1089 925 1095 925 1100 926 1106 927 1112 927 1118 928 1124 928 1129 928 1136 928 1142 929 1148 929 1153 929 1159 930 1165 929 1171 929 1175 930 1181 930 1185 930 1190 930 1195 930 1199 930 1203 931 1207 931 1211 931 1214 932 1215 932 1215 932 1214 933 1213 933 1212 933 1211 933 1210 933 1208 932 1207 932 1206 932 1205 931 1205 931 1204 930 1204 930 1203 930 1203 930 1203 929 1202 929 1202 929 1202 929 1202 929 1202 929 1202 929 1202 929 1202 929";
    	int skip = 2;
    	int count = 0;
    	int startingKickSkip = 50;
    	st = new StringTokenizer(path);
    	
    	try {	
    		for(int i = 0; i < startingKickSkip; i++) 
    		{
    			st.nextToken();
    			st.nextToken();
    		}
    		while(st.hasMoreTokens())
        	{
    			if(count++ == skip)
    			{
					double l = Double.parseDouble(st.nextToken());
					double r = Double.parseDouble(st.nextToken());
					left.add(l);
					right.add(r);
					count = 0;
    			}
    			else
    			{
    				try {
    				st.nextToken();
    				st.nextToken();
    				} catch(Exception e) {}
    			}
        	}
    	} catch(Exception e) {
    		e.printStackTrace();
    		Robot.drivetrain.stop();
    		DriverStation.reportWarning("NOOOO", true);
    	}

    	addParallel(new ZeroGyro());
    	addSequential(new ArmPincherClose());
    	addParallel(new ArmSetSwitch());
    	addSequential(new FollowEncoder(left, right,7));
    	addSequential(new SetAngle(90));
    	addSequential(new DriveForward(1.5,1.2));
//    	addSequential(new ArmPincherOpen());
    }
}
