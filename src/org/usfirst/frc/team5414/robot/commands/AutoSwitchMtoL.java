package org.usfirst.frc.team5414.robot.commands;

import java.util.ArrayList;
import java.util.StringTokenizer;

import org.usfirst.frc.team5414.robot.Robot;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.command.CommandGroup;

/**
 *
 */
public class AutoSwitchMtoL extends CommandGroup {

    public AutoSwitchMtoL() {
    	StringTokenizer st = null;
    	ArrayList<Double> left = new ArrayList<>();
    	ArrayList<Double> right = new ArrayList<>();
    	ArrayList<Double> left2 = new ArrayList<>();
    	ArrayList<Double> right2 = new ArrayList<>();
    	String path = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 2 2 2 2 3 3 3 4 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11 12 12 13 13 15 15 16 16 18 17 20 19 22 20 24 22 26 23 29 25 31 26 34 28 36 30 39 31 42 33 45 35 48 37 51 39 54 41 57 43 61 45 64 47 67 49 71 52 75 54 78 56 82 59 86 61 89 63 93 66 97 68 101 71 105 73 109 76 113 79 117 81 121 84 125 87 129 90 133 92 137 95 141 98 145 101 150 104 154 107 158 110 162 113 166 116 170 118 174 122 179 125 183 127 187 130 192 133 196 136 201 139 205 142 210 145 215 148 219 151 224 154 229 156 233 159 238 162 243 164 248 167 253 170 258 172 263 175 269 177 274 180 279 182 285 185 290 187 296 189 301 192 307 194 313 196 318 198 324 201 330 203 336 205 342 207 348 209 354 211 360 214 366 216 372 218 378 220 384 222 389 225 395 227 401 229 407 231 413 234 418 236 424 238 430 241 435 244 441 246 447 249 452 252 458 254 463 257 469 260 474 263 480 266 485 269 490 272 495 275 501 279 507 281 511 285 516 288 521 291 526 294 531 298 536 301 541 305 545 309 550 312 555 316 559 320 564 323 568 327 573 332 577 336 581 340 586 344 590 348 594 353 599 357 603 362 607 367 611 371 615 376 619 381 623 386 626 391 630 396 634 401 638 406 641 411 645 417 648 422 652 427 655 432 659 438 662 443 665 449 669 454 672 460 675 466 678 472 681 478 684 484 687 490 690 497 694 502 696 509 699 515 702 521 704 528 707 535 710 541 712 548 715 555 718 562 720 569 722 576 725 584 727 591 730 598 732 605 734 613 736 620 739 627 741 634 743 642 745 649 748 656 750 662 752 669 754 676 756 683 758 689 760 696 763 702 765 708 767 714 769 720 771 726 773 732 775 738 777 744 780 749 782 755 784 761 786 766 788 772 791 777 793 781 795 786 798 791 800 795 803 800 805 804 808 809 810 813 813 817 816 821 818 824 821 828 824 832 827 836 830 840 833 843 836 847 839 850 842 853 845 857 848 860 851 863 854 866 857 869 860 872 863 875 866 878 869 881 872 883 875 886 878 889 881 892 884 894 886 897 889 900 892 902 895 905 897 907 900 909 903 912 905 915 908 917 910 919 913 922 915 924 918 926 920 929 923 931 925 933 927 935 930 938 932 940 934 942 937 944 939 946 941 949 943 951 945 953 948 955 950 957 952 959 954 961 956 963 958 965 960 967 962 969 965 971 967 973 969 975 971 977 973 979 975 981 977 983 979 985 981 987 983 989 985 991 987 993 988 994 990 995 990 995 991 995 991 995 992 994 992 994 993 994 993 994 993 994 994 995 994 995 994 995 994 995 994 995 994 995 994 995 994 995 994 995 994 995 994";
    	String getCube = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -1 0 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -2 -1 -2 -1 -2 -1 -2 -2 -2 -2 -2 -2 -3 -2 -3 -2 -3 -2 -3 -2 -3 -2 -4 -2 -4 -2 -4 -2 -4 -2 -4 -2 -5 -2 -5 -3 -5 -3 -5 -3 -6 -3 -6 -4 -6 -4 -6 -5 -6 -5 -6 -6 -7 -6 -7 -7 -7 -8 -7 -8 -7 -9 -7 -10 -7 -11 -7 -12 -7 -13 -8 -14 -8 -15 -8 -16 -8 -17 -9 -19 -9 -20 -9 -21 -10 -23 -10 -24 -10 -25 -11 -27 -11 -28 -11 -29 -12 -30 -12 -32 -13 -33 -13 -34 -14 -35 -15 -36 -16 -38 -17 -39 -18 -40 -19 -41 -20 -42 -21 -43 -23 -45 -24 -46 -26 -47 -27 -48 -29 -49 -30 -50 -31 -51 -33 -52 -35 -53 -36 -54 -38 -55 -39 -56 -41 -57 -43 -58 -44 -58 -46 -59 -48 -61 -50 -62 -51 -63 -53 -64 -55 -65 -57 -66 -58 -67 -60 -68 -62 -69 -63 -71 -65 -72 -67 -73 -68 -74 -70 -75 -72 -77 -74 -78 -75 -79 -77 -81 -78 -82 -80 -83 -82 -84 -83 -86 -85 -87 -87 -89 -88 -90 -90 -91 -92 -92 -93 -94 -95 -95 -97 -96 -98 -97 -100 -99 -102 -100 -103 -101 -105 -102 -107 -103 -109 -104 -111 -105 -113 -106 -115 -107 -117 -108 -119 -109 -121 -110 -124 -111 -126 -112 -128 -112 -130 -113 -133 -114 -135 -114 -138 -115 -140 -116 -143 -116 -146 -117 -148 -117 -151 -118 -153 -118 -156 -119 -158 -119 -161 -120 -163 -121 -166 -121 -169 -122 -171 -122 -174 -123 -176 -123 -178 -124 -181 -124 -183 -125 -186 -125 -188 -126 -191 -127 -193 -128 -196 -129 -198 -129 -201 -130 -203 -131 -205 -132 -208 -133 -210 -134 -213 -135 -215 -136 -218 -138 -221 -139 -223 -140 -226 -141 -228 -143 -231 -144 -234 -146 -236 -147 -239 -149 -242 -151 -245 -152 -247 -154 -250 -156 -253 -158 -255 -159 -258 -161 -261 -163 -263 -165 -266 -167 -269 -169 -271 -171 -274 -174 -277 -176 -279 -179 -282 -181 -284 -184 -287 -186 -289 -189 -292 -191 -294 -194 -297 -197 -299 -199 -302 -202 -304 -205 -307 -208 -309 -211 -312 -213 -314 -216 -316 -219 -319 -222 -321 -225 -324 -228 -326 -231 -329 -234 -331 -237 -334 -240 -336 -243 -339 -246 -341 -249 -344 -252 -346 -255 -349 -258 -351 -261 -354 -264 -356 -268 -359 -271 -361 -274 -364 -277 -366 -280 -369 -283 -372 -286 -374 -290 -377 -293 -380 -296 -382 -300 -385 -303 -387 -306 -390 -309 -392 -312 -395 -316 -398 -319 -400 -322 -403 -326 -405 -329 -408 -333 -410 -336 -413 -340 -415 -343 -418 -347 -420 -350 -422 -354 -425 -357 -427 -361 -430 -364 -432 -368 -434 -371 -437 -375 -439 -379 -442 -382 -444 -386 -447 -390 -449 -394 -451 -397 -454 -401 -456 -404 -458 -408 -461 -412 -463 -416 -465 -420 -468 -423 -470 -427 -472 -431 -476 -438 -477 -440 -479 -443 -482 -447 -484 -451 -486 -455 -489 -459 -491 -462 -493 -467 -496 -471 -498 -474 -500 -478 -503 -483 -505 -487 -507 -491 -509 -495 -512 -499 -514 -503 -516 -507 -518 -511 -521 -515 -523 -519 -524 -523 -526 -527 -528 -531 -529 -534 -531 -538 -532 -542 -534 -546 -535 -550 -536 -554 -536 -557 -537 -561 -537 -565 -537 -569 -538 -572 -538 -576 -538 -580 -538 -584 -538 -587 -538 -591 -538 -594 -538 -598 -537 -602 -537 -605 -537 -608 -537 -611 -537 -614 -537 -617 -537 -620 -537 -622 -537 -625 -537 -628 -537 -630 -537 -632 -537 -635 -537 -637 -538 -638 -538 -640 -538 -642 -538 -643 -538 -645 -538 -646 -538 -647 -538 -648 -538 -649 -538 -650 -538 -651 -538 -651 -538 -651 -538 -652 -538 -652 -538 -652 -538 -652 -538 -652 -538 -651 -538 -651 -538 -651 -538 -650 -538 -650 -538 -649 -538 -649 -538 -648 -538 -647 -538 -647 -538 -646 -538 -645 -538 -645 -538 -644 -538 -643 -537 -642 -537 -641 -537 -640 -537 -639 -537 -639 -537 -638 -537 -637 -537 -636 -537 -635 -537 -634 -537 -633 -537 -632 -537 -631 -537 -630 -536 -629 -536 -627 -536 -626 -536 -625 -536 -624 -536 -623 -535 -622 -535 -621 -535 -620 -535 -620 -534 -619 -534 -617 -534 -617 -533 -616 -533 -615 -533 -614 -532 -613 -532 -612 -531 -611 -531 -610 -530 -609 -530 -608 -529 -607 -529 -606 -528 -605 -527 -604 -526 -603 -525 -602 -525 -601 -524 -600 -523 -599 -522 -598 -521 -597 -520 -596 -519 -595 -518 -594 -516 -593 -515 -591 -514 -590 -513 -589 -512 -588 -510 -587 -509 -586 -508 -585 -507 -583 -505 -582 -504 -581 -503 -580 -501 -579 -500 -578 -499 -577 -497 -575 -496 -574 -494 -573 -493 -572 -492 -571 -490 -570 -489 -569 -487 -567 -486 -566 -484 -565 -483 -564 -481 -563 -480 -561 -478 -560 -477 -559 -475 -558 -474 -556 -472 -555 -471 -554 -469 -553 -468 -551 -466 -550 -465 -549 -463 -547 -462 -546 -461 -545 -459 -543 -458 -542 -456 -541 -455 -539 -453 -538 -452 -536 -451 -535 -449 -534 -448 -532 -447 -531 -445 -529 -444 -528 -443 -526 -441 -525 -440 -523 -439 -522 -437 -520 -436 -518 -435 -517 -434 -515 -432 -514 -431 -512 -430 -510 -428 -509 -427 -507 -426 -506 -425 -504 -423 -502 -422 -501 -421 -499 -419 -497 -418 -496 -417 -494 -416 -492 -414 -491 -413 -489 -411 -487 -410 -486 -409 -484 -407 -483 -406 -481 -405 -479 -403 -478 -402 -476 -401 -475 -399 -473 -398 -472 -397 -470 -395 -468 -394 -467 -393 -465 -391 -463 -390 -462 -389 -460 -387 -459 -386 -457 -385 -455 -384 -454 -382 -452 -381 -450 -379 -448 -378 -447 -377 -445 -375 -443 -374 -441 -373 -440 -371 -438 -370 -436 -369 -434 -367 -432 -366 -431 -365 -429 -363 -427 -362 -426 -360 -424 -359 -422 -358 -421 -356 -419 -355 -418 -353 -416 -352 -414 -350 -412 -349 -411 -347 -409 -346 -407 -344 -406 -343 -404 -341 -402 -340 -401 -339 -399 -337 -398 -336 -396 -334 -395 -333 -393 -332 -391 -330 -389 -329 -388 -327 -386 -325 -384 -324 -382 -322 -381 -321 -379 -320 -377 -318 -376 -317 -374 -316 -372 -314 -370 -313 -368 -312 -366 -311 -365 -309 -363 -308 -361 -307 -359 -306 -357 -304 -355 -303 -353 -302 -351 -300 -349 -299 -346 -298 -345 -296 -343 -295 -340 -294 -338 -292 -336 -291 -334 -290 -332 -289 -331 -287 -329 -286 -327 -284 -324 -283 -322 -281 -320 -280 -318 -279 -316 -277 -314 -276 -312 -274 -310 -273 -308 -271 -306 -270 -304 -268 -302 -267 -300 -266 -298 -265 -297 -263 -295 -262 -293 -261 -292 -260 -290 -258 -289 -257 -288 -256 -287 -255 -286 -253 -285 -253 -284";
    	int skip = 2;
    	int count = 0;
    	int startingKickSkip = 50;
    	st = new StringTokenizer(path);
    	
    	try {	
    		for(int i = 0; i < startingKickSkip; i++) 
    		{
    			st.nextToken();
    			st.nextToken();
    		}
    		while(st.hasMoreTokens())
        	{
    			if(count++ == skip)
    			{
					double l = Double.parseDouble(st.nextToken());
					double r = Double.parseDouble(st.nextToken());
					left.add(l);
					right.add(r);
					count = 0;
    			}
    			else
    			{
    				try {
    				st.nextToken();
    				st.nextToken();
    				} catch(Exception e) {}
    			}
        	}
    	} catch(Exception e) {
    		e.printStackTrace();
    		Robot.drivetrain.stop();
    		DriverStation.reportWarning("NOOOO", true);
    	}
    	
    	st = new StringTokenizer(getCube);
      	try {	
    		for(int i = 0; i < startingKickSkip; i++) 
    		{
    			st.nextToken();
    			st.nextToken();
    		}
    		while(st.hasMoreTokens())
        	{
    			if(count++ == skip)
    			{
					double l = Double.parseDouble(st.nextToken());
					double r = Double.parseDouble(st.nextToken());
					left2.add(l);
					right2.add(r);
					count = 0;
    			}
    			else
    			{
    				try {
    				st.nextToken();
    				st.nextToken();
    				} catch(Exception e) {}
    			}
        	}
    	} catch(Exception e) {
    		e.printStackTrace();
    		Robot.drivetrain.stop();
    		DriverStation.reportWarning("NOOOO", true);
    	}
    	
//    	/*
    	addParallel(new ZeroGyro());
    	addParallel(new ArmPincherClose());
    	addSequential(new Wait(.2));
    	addParallel(new ArmSetSwitch());
    	addSequential(new FollowEncoder(left, right));
    	addSequential(new ArmPincherOpen());
    	addSequential(new Wait(.3));
    	addSequential(new DriveForward(-1.5));
    	addSequential(new TurnRight(45));
    	addParallel(new SpintakeIntakeCommand());
    	addParallel(new SpintakePushIn());
    	addSequential(new DriveForward(1.15));
    	addSequential(new DriveForward(-1.15-.5));
    	addParallel(new SpintakeOrientRight());
    	addSequential(new Wait(.26));
    	addParallel(new SpintakeIntakeCommand());
    	addSequential(new DriveForward(.5));
    	addSequential(new TurnLeft(45));
    	addParallel(new SpintakeStop());
    	addParallel(new ArmSetLow());
    	addSequential(new Wait(.7));
    	addSequential(new ArmPincherClose());
    	addSequential(new SpintakePushOut());
    	addSequential(new Wait(.3));
    	addParallel(new ArmSetSwitch());
    	addSequential(new DriveForward(1.5));
    	addSequential(new ArmPincherOpen());
    	
//		*/
//    	addSequential(new FollowEncoder(left2, right2));
    }
}
