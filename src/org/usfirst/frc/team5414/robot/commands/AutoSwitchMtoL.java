package org.usfirst.frc.team5414.robot.commands;

import java.util.ArrayList;
import java.util.StringTokenizer;

import org.usfirst.frc.team5414.robot.Robot;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.command.CommandGroup;

/**
 *
 */
public class AutoSwitchMtoL extends CommandGroup {

    public AutoSwitchMtoL() {
    	StringTokenizer st = null;
    	ArrayList<Double> left = new ArrayList<>();
    	ArrayList<Double> right = new ArrayList<>();
    	String path = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 2 0 2 1 3 1 4 2 4 3 6 4 7 5 8 7 10 8 12 10 14 12 16 14 18 16 21 18 23 21 26 23 28 26 31 28 34 31 37 34 40 37 43 40 46 43 49 46 53 49 56 53 60 56 63 59 67 63 71 66 74 70 78 74 82 78 86 81 90 85 94 89 98 93 102 97 106 101 110 105 114 109 119 113 123 117 127 121 131 126 136 130 140 134 144 138 148 143 152 147 157 151 161 155 165 159 169 164 173 168 177 172 180 176 184 180 187 184 191 188 194 192 197 196 200 200 202 204 205 208 207 212 209 216 210 220 212 224 213 228 214 232 215 236 215 240 216 244 216 248 216 252 216 256 216 260 215 264 215 267 215 271 214 275 214 279 213 283 213 287 212 291 212 294 211 298 211 301 211 305 210 309 210 312 210 316 210 319 210 322 210 325 210 328 210 331 210 334 210 336 210 339 210 341 210 344 210 346 211 349 211 351 211 354 211 356 212 358 212 360 212 362 212 364 212 366 213 367 213 369 213 370 213 372 213 373 214 374 214 376 214 377 214 378 214 379 214 380 214 381 214 382 214 383 214 384 214 385 215 386 215 387 215 388 215 389 215 390 215 391 215 392 215 392 215 393 215 394 215 394 215 395 215 396 215 396 215 397 215 398 215 398 216 399 216 399 216 400 216 400 217 401 217 401 217 402 218 403 218 403 219 404 219 405 220 406 220 407 221 407 222 408 223 409 223 410 224 412 225 413 227 414 228 415 229 417 230 418 232 420 233 421 235 423 236 425 238 426 240 428 242 430 244 432 246 434 248 436 250 438 252 440 254 442 256 445 258 447 260 449 263 451 265 454 267 456 270 459 272 461 275 464 278 467 280 469 282 471 285 474 288 477 290 479 293 482 296 485 298 487 301 490 304 493 307 496 309 498 312 501 315 504 318 507 321 510 324 513 326 516 329 519 332 522 335 525 338 528 341 530 344 533 347 536 350 539 353 542 356 545 359 548 362 552 365 555 368 558 371 561 374 564 377 567 380 570 383 573 387 576 390 579 393 582 397 585 400 588 403 591 407 594 410 597 414 600 417 603 421 606 425 608 428 611 432 614 436 617 440 619 444 622 448 625 452 627 457 630 461 632 465 634 470 637 474 639 479 641 483 644 488 646 493 648 498 650 503 652 507 654 512 656 518 658 523 659 528 661 533 663 538 665 543 666 548 668 554 670 559 671 564 673 569 674 575 676 580 677 585 678 591 680 596 681 601 682 607 684 612 685 618 686 623 687 628 689 633 690 639 691 644 692 649 693 655 694 660 695 665 697 671 698 676 699 681 701 686 702 691 703 695 705 700 706 705 708 709 710 714 712 718 714 722 715 727 717 731 720 735 722 739 724 743 726 747 728 751 731 755 733 758 736 762 738 766 741 769 743 773 746 777 749 780 751 784 754 787 757 791 760 794 762 798 765 801 768 804 771 808 774 811 777 814 780 818 783 821 786 824 789 827 792 830 795 833 798 837 800 840 803 843 806 845 809 848 811 851 814 853 816 856 819 859 822 861 824 863 826 866 829 868 831 870 833 872 835 874 837 876 840 878 841 880 843 882 845 884 847 885 849 887 851 889 852 890 854 892 856 894 857 895 859 897 860 898 862 900 863 901 864 902 866 904 867 905 868 906 869 907 870 909 872 910 873 911 874 912 875 913 876 914 877 915 878 916 879 917 880 918 881 919 882 920 883 921 884 922 885 922 885 923 886 924 887 924 887 925 888 926 888 926 889 927 889 927 890 927 890 928 891 928 891 928 891 929 891 929 892 929 892 929 892 929 892";
    	int skip = 3;
    	int count = 0;
    	int startingKickSkip = 50;
    	st = new StringTokenizer(path);
    	
    	try {	
    		for(int i = 0; i < startingKickSkip; i++) 
    		{
    			st.nextToken();
    			st.nextToken();
    		}
    		while(st.hasMoreTokens())
        	{
    			if(count++ == skip)
    			{
					double l = Double.parseDouble(st.nextToken());
					double r = Double.parseDouble(st.nextToken());
					left.add(l);
					right.add(r);
					count = 0;
    			}
    			else
    			{
    				try {
    				st.nextToken();
    				st.nextToken();
    				} catch(Exception e) {}
    			}
        	}
    	} catch(Exception e) {
    		e.printStackTrace();
    		Robot.drivetrain.stop();
    		DriverStation.reportWarning("NOOOO", true);
    	}

    	addParallel(new ZeroGyro());
    	addParallel(new ArmPincherClose());
    	addSequential(new Wait(.3));
    	addParallel(new ArmSetSwitch());
    	addSequential(new FollowEncoder(left, right));
    	addSequential(new DriveForward(.6));
    	addSequential(new ArmPincherOpen());
    	addSequential(new Wait(.5));
    	addSequential(new DriveForward(-1));
    	addSequential(new SetAngle(-90));
    	addSequential(new DriveForward(.7));
    }
}
