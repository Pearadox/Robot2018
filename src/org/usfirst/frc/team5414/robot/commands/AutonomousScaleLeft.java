package org.usfirst.frc.team5414.robot.commands;

import java.util.ArrayList;
import java.util.StringTokenizer;

import org.usfirst.frc.team5414.robot.Robot;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.DriverStation.Alliance;
import edu.wpi.first.wpilibj.command.CommandGroup;

/**
 *
 */
public class AutonomousScaleLeft extends CommandGroup {

    public AutonomousScaleLeft() {
    	
    	StringTokenizer st = null;
    	ArrayList<Double> left = new ArrayList<>();
    	ArrayList<Double> right = new ArrayList<>();
    	String path = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 3 5 6 8 8 11 9 14 11 18 14 22 17 28 21 33 26 40 32 47 38 56 45 67 52 78 61 90 70 104 81 119 92 136 104 153 117 172 131 193 146 214 161 237 178 262 195 287 212 313 230 341 250 370 270 400 291 430 312 461 333 493 354 525 377 557 399 591 422 624 445 658 467 694 490 729 518 770 540 802 565 838 589 875 614 912 639 948 664 984 688 1021 713 1061 737 1100 763 1139 790 1178 816 1218 842 1257 868 1297 895 1337 921 1377 948 1418 973 1459 999 1501 1026 1542 1055 1583 1083 1624 1110 1665 1137 1704 1164 1746 1191 1789 1218 1832 1245 1875 1274 1917 1302 1959 1330 2001 1358 2042 1386 2084 1413 2128 1441 2173 1468 2216 1496 2259 1524 2303 1553 2346 1583 2389 1612 2432 1640 2476 1669 2521 1697 2566 1724 2610 1753 2654 1783 2698 1812 2742 1841 2784 1870 2828 1898 2873 1927 2918 1955 2963 1983 3007 2012 3050 2041 3094 2071 3136 2100 3180 2129 3226 2158 3271 2187 3316 2215 3360 2244 3403 2273 3447 2303 3490 2333 3533 2362 3579 2392 3624 2421 3669 2450 3713 2477 3757 2507 3801 2536 3843 2566 3885 2596 3929 2625 3973 2655 4018 2684 4062 2712 4105 2741 4146 2770 4188 2801 4229 2830 4271 2859 4314 2888 4355 2917 4397 2946 4438 2973 4479 3002 4519 3031 4558 3061 4597 3091 4637 3119 4675 3147 4714 3176 4752 3204 4791 3232 4829 3261 4867 3291 4903 3320 4938 3349 4974 3377 5011 3406 5049 3434 5087 3462 5124 3489 5162 3519 5200 3548 5239 3578 5278 3607 5316 3635 5356 3664 5396 3692 5436 3719 5477 3748 5517 3777 5558 3806 5598 3836 5637 3864 5676 3893 5718 3921 5761 3949 5803 3976 5844 4005 5886 4033 5927 4063 5969 4092 6010 4121 6052 4149 6094 4177 6137 4205 6179 4232 6222 4261 6265 4291 6307 4321 6350 4350 6391 4379 6433 4408 6477 4436 6521 4464 6564 4492 6607 4521 6649 4550 6691 4580 6733 4609 6775 4638 6818 4666 6862 4694 6903 4721 6945 4749 6987 4778 7029 4808 7070 4838 7110 4866 7151 4895 7193 4924 7233 4952 7273 4979 7314 5007 7353 5036 7392 5066 7428 5094 7465 5122 7503 5150 7539 5178 7576 5207 7614 5233 7652 5263 7689 5292 7725 5322 7761 5350 7796 5379 7830 5408 7866 5436 7902 5464 7936 5492 7971 5521 8006 5551 8042 5580 8076 5608 8110 5637 8144 5665 8177 5694 8211 5721 8248 5749 8284 5778 8320 5808 8355 5837 8391 5865 8426 5893 8461 5922 8496 5950 8529 5977 8564 6006 8598 6034 8634 6063 8668 6091 8703 6119 8738 6147 8771 6174 8804 6202 8837 6228 8869 6256 8901 6284 8934 6313 8967 6341 9000 6368 9033 6396 9066 6423 9098 6450 9130 6477 9161 6504 9192 6533 9223 6561 9254 6589 9285 6616 9317 6643 9349 6670 9380 6697 9412 6723 9444 6751 9475 6779 9505 6808 9536 6835 9566 6863 9596 6891 9625 6918 9655 6946 9687 6972 9718 7000 9749 7028 9780 7057 9810 7085 9840 7113 9870 7141 9900 7169 9930 7197 9959 7223 9988 7251 10018 7279 10050 7308 10081 7336 10112 7364 10142 7392 10172 7419 10202 7447 10232 7473 10261 7500 10290 7524 10314 7548 10337 7572 10363 7598 10389 7623 10415 7647 10439 7669 10462 7692 10484 7712 10506 7733 10528 7752 10549 7772 10569 7790 10586 7808 10603 7824 10620 7839 10635 7852 10649 7865 10662 7876 10673 7887 10683 7896 10692 7905 10700 7913 10708 7920 10714 7926 10719 7932 10724 7937 10728 7941 10731 7945 10734 7947 10736 7950 10737 7952 10737 7954 10737 7956 10736 7959 10735 7961 10734 7962 10733 7964 10731 7964 10730 7965 10730 7966 10729 7966 10728 7966 10727 7966 10727 7966 10727 7966 10727 7966 10727 7966 10727 7966 10727 7966 10727 7966 10727 7966 10727 7966 10726 7966 10725 7966 10724 7966 10723 7966 10722 7966 10721 7967 10719 7967 10717 7968 10715 7969 10712 7971 10708 7974 10703 7978 10697 7982 10691 7987 10683 7992 10674 7999 10665 8006 10654 8013 10642 8021 10629 8030 10616 8039 10602 8049 10586 8059 10570 8069 10554 8080 10537 8091 10519 8102 10502 8113 10483 8124 10465 8135 10446 8146 10430 8156 10413 8166 10395 8176 10377 8185 10361 8193 10346 8201 10334 8205 10322 8208 10309 8215 10297 8221 10285 8226 10276 8230 10267 8235 10259 8239 10252 8242 10246 8244 10240 8246 10235 8248 10231 8249 10227 8250 10224 8251 10222 8251 10220 8251 10219 8251 10219 8250 10219 8250 10219 8250 10220 8250 10220 8250 10221 8250 10221 8250 10222 8250 10222 8250 10222 8250 10222 8250 10222";
    	int skip = 1;
    	int count = 0;
    	
    	int startingKickSkip = 75;
    	st = new StringTokenizer(path);
    	
//    	try {	
    		for(int i = 0; i < startingKickSkip; i++) st.nextToken();
    		while(st.hasMoreTokens())
        	{
    			if(count++ == skip)
    			{
    				double l = Double.parseDouble(st.nextToken());
    				double r = Double.parseDouble(st.nextToken());
//    				if(l%1 != 0 && r%1 != 0)
//    				{
    					left.add(l);
    					right.add(r);
    					count = 0;
//    				}
    			}
    			else
    			{
    				try {
    				st.nextToken();
    				st.nextToken();
    				} catch(Exception e) {}
    			}
        	}
//    	} catch(Exception e) {
//    		e.printStackTrace();
//    		Robot.drivetrain.stop();
//    		DriverStation.reportWarning("NOOOO", true);
//    	}
		
    	addSequential(new DriveEncDist(left, right));

    	
//    	boolean isBlue= DriverStation.getInstance().getAlliance() == Alliance.Blue;
//    	char scaleSide = DriverStation.getInstance().getGameSpecificMessage().charAt(1);
//    	if(isBlue) //alliance is blue
//    	{
//    		if(scaleSide == 'b') //scaleSide is blue
//    		{
//    			addSequential(new DriveEncDist(250 / 12.)); //distance from starting area to scale
//    		}
//    		else //scaleSide is red
//    		{
//    			addSequential(new AutonomousLeftToRightScale());
//    		}
//    		addSequential(new PlaceCubeScale());
//    	}
//    	else //alliance is red
//    	{
//    		
//    	}
    	
    }
}
