package org.usfirst.frc.team5414.robot.commands;

import java.util.ArrayList;
import java.util.StringTokenizer;

import org.usfirst.frc.team5414.robot.Robot;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.command.CommandGroup;

/**
 *
 */
public class AutoSwitchMtoR extends CommandGroup {

    public AutoSwitchMtoR() {
    	StringTokenizer st = null;
    	ArrayList<Double> left = new ArrayList<>();
    	ArrayList<Double> right = new ArrayList<>();
    	String path = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 2 1 2 1 2 1 2 1 2 1 2 1 3 2 3 2 3 2 3 3 3 3 4 3 4 3 4 4 5 4 5 5 6 5 6 6 7 6 7 7 8 8 9 8 9 9 10 9 11 10 11 11 12 12 13 12 14 13 14 14 15 15 16 15 17 16 18 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 35 35 36 36 37 38 38 39 39 40 40 41 41 42 43 44 44 45 45 46 46 47 48 49 49 50 50 51 51 52 53 54 54 55 55 56 57 57 58 59 59 60 61 61 62 63 63 64 65 65 66 66 68 68 69 69 71 70 72 71 73 73 75 74 76 75 78 77 79 78 81 79 83 80 84 81 86 82 88 84 89 85 91 86 93 87 95 88 97 89 98 89 100 90 102 91 104 92 106 93 107 93 109 94 111 95 113 95 115 96 116 96 118 97 120 97 122 98 124 98 125 99 127 99 129 100 131 100 132 101 134 101 136 102 138 102 139 103 141 103 143 104 145 104 146 105 148 105 150 105 152 106 153 106 155 107 157 107 159 108 160 108 162 108 164 109 165 109 167 110 169 110 171 111 172 111 174 112 176 112 178 113 179 113 181 114 183 115 185 115 186 116 188 117 190 117 191 118 193 119 195 119 196 120 198 120 200 121 201 121 203 121 204 122 206 122 208 122 209 122 211 122 212 122 214 122 215 123 217 123 218 123 220 123 221 123 223 123 224 123 226 123 227 123 228 123 230 123 231 123 233 123 234 123 235 123 237 123 238 123 239 123 241 123 242 123 244 123 245 123 246 123 248 123 249 123 250 123 252 123 253 123 254 123 255 123 257 123 258 123 259 123 260 123 261 123 263 123 264 123 265 123 266 123 268 123 269 123 270 123 271 123 272 123 274 123 275 123 276 123 277 123 278 123 279 123 281 123 282 123 283 123 284 123 285 123 286 123 287 123 289 123 290 123 290 123 291 123 292 123 293 123 294 123 295 123 295 123 296 123 296 123 297 123 298 123 298 123 299 123 299 123 300 123 300 123 300 123 301 123 301 123 301 123 302 123 302 123 302 123 302 123 303 123 303 123 303 123 303 123 304 123 304 123 304 123 304 123 304 123 305 123 305 123 305 123 305 123 305 123 306 123 306 123 306 123 306 123 306 123 307 123 307 123 307 123 308 123 308 124 309 124 310 125 311 125 312 126 313 128 314 129 316 130 318 132 320 134 322 136 324 138 327 141 329 143 332 146 335 149 338 152 341 155 345 159 348 162 352 165 355 169 359 173 363 177 367 181 371 185 375 189 379 193 384 197 388 201 393 205 397 210 401 214 406 218 410 222 415 227 419 231 423 235 427 239 431 243 435 247 439 251 443 255 447 259 450 263 454 266 457 270 461 274 464 277 468 281 471 284 474 288 477 291 480 294 483 297 486 300 489 303 492 307 495 310 497 312 499 315 502 317 503 320 506 322 508 325 511 328 513 330 515 333 517 335 518 337 520 339 522 341 524 343 526 345 528 347 529 349 531 351 532 353 534 355 535 357 537 358 538 360 539 362 540 364 541 365 542 367 543 369 544 370 545 372 546 373 547 375 548 377 548 378 549 380 550 381 550 383 551 384 551 386 552 387 552 389 552 390 553 391 553 393 553 394 554 395 554 396 554 398 554 399 555 400 555 401 555 402 556 403 556 404 556 405 557 406 557 407 557 408 558 409 558 410 558 411 559 412 559 412 559 413 560 414 560 415 560 415 561 416 561 417 562 418 562 418 562 419 563 420 563 421 563 421 564 422 564 423 564 424 564 424 564 425 565 426 565 427 565 428 565 429 565 429 565 430 565 431 565 432 565 433 565 435 565 436 565 437 565 438 565 439 565 441 565 442 565 443 565 445 565 446 565 448 565 449 565 450 565 452 565 453 565 454 565 456 566 457 566 458 566 460 566 461 566 462 567 463 567 464 567 465 567 466 568 467 568 468 568 469 568 470 569 470 569 471 569 472 570 473 570 473 570 474 571 475 571 475 571 476 572 477 572 477 572 478 573 479 573 479 573 480 573 481 574 481 574 482 574 483 574 484 574 484 574 485 574 486 574 487 574 488 574 489 574 490 574 491 574 491 574 492 574 493 574 494 574 495 574 496 574 497 574 498 574 499 574 500 574 501 574 503 574 504 574 505 574 506 574 507 574 508 574 509 574 510 574 511 574 512 574 513 574 514 574 515 574 516 574 517 574 517 574 518 574 519 574 520 574 521 574 522 574 522 574 523 574 524 574 525 574 525 575 526 575 527 575 527 575 528 575 529 575 529 575 530 575 530 576 531 576 531 576 532 576 532 576 533 576 533 576 533 576 534 577 534 577 534 577 535 577 535 577 535 577 536 577 536 578 536 578 536 578 536 578 537 578 537 578 537 579 537 579 538 579 538 579 538 579 538 579 538 579 539 580 539 580 539 580 539 580 540 581 540 581 541 581 541 582 542 582 542 583 543 583 544 584 544 584 545 585 546 585 547 586 548 587 549 588 550 588 551 589 552 590 553 591 554 592 556 593 557 594 558 595 559 595 560 596 562 597 563 598 564 599 565 600 567 601 568 602 570 604 571 605 573 606 574 607 575 608 577 609 579 610 580 612 582 613 583 614 585 615 586 617 588 618 590 619 591 621 593 622 594 623 596 625 598 626 599 628 601 629 602 630 604 632 605 634 607 635 608 637 610 638 611 640 613 641 615 643 616 644 618 646 619 648 621 649 622 651 624 653 626 654 627 656 629 658 631 660 633 661 634 663 636 665 638 667 640 669 642 671 644 673 646 675 648 678 650 680 652 682 654 684 656 686 658 688 660 691 663 693 665 696 667 698 669 700 672 703 674 705 677 708 679 710 682 713 684 715 686 718 689 720 692 723 694 726 697 728 699 731 702 734 705 736 707 739 710 742 713 745 715 747 718 750 721 753 723 756 726 758 729 761 732 764 734 767 737 770 740 772 743 775 746 778 748 781 751 ";
    	int skip = 3;
    	int count = 0;
    	int startingKickSkip = 50;
    	st = new StringTokenizer(path);
    	
    	try {	
    		for(int i = 0; i < startingKickSkip; i++) 
    		{
    			st.nextToken();
    			st.nextToken();
    		}
    		while(st.hasMoreTokens())
        	{
    			if(count++ == skip)
    			{
					double l = Double.parseDouble(st.nextToken());
					double r = Double.parseDouble(st.nextToken());
					left.add(l);
					right.add(r);
					count = 0;
    			}
    			else
    			{
    				try {
    				st.nextToken();
    				st.nextToken();
    				} catch(Exception e) {}
    			}
        	}
    	} catch(Exception e) {
    		e.printStackTrace();
    		Robot.drivetrain.stop();
    		DriverStation.reportWarning("NOOOO", true);
    	}
    	
    	addSequential(new ArmPincherClose());
    	addParallel(new ArmSetSwitch());
    	addSequential(new FollowEncoder(left, right));
    	addSequential(new Wait(.3));
    	addSequential(new SetAngle(0));
    	addSequential(new DriveForward(.6));
    	addSequential(new ArmPincherOpen());
//    	addSequential(new DriveForward(-.5));
//    	addSequential(new SetAngle(90));

    }
}
